// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package edu.kit.informatik.studyplan.client.model.system;

import java.util.Collection;

import edu.kit.informatik.studyplan.client.model.system.FilterCollection;
import edu.kit.informatik.studyplan.client.model.system.SearchModuleCollection;
import edu.kit.informatik.studyplan.client.model.system.SimpleModuleCollection;

/************************************************************/
/**
 * Die Seach-Collection, welche das Lazy-Loading der Module in der Suche
 * übernimmt. Hierbei werden in zehner Schritten nach und nach mehr Module
 * geladen und in einzelne SearchModuleCollections gespeichert. Beim Abruf
 * mittels getModules() werden diese dann in eine einzige Collection
 * zusammengeführt.
 */
public class SearchLazyLoadingCollection {
    /**
     * Die SearchModuleCollections
     */
    private Collection<SearchModuleCollection> searchModules;
    /**
     * Die Filter, welche beim Abruf zu berücksichtigen sind
     */
    private FilterCollection filters;
    /**
     * Die Anzahl der geladenen Module
     */
    private int highestLoaded;
    /**
     * Die ID des Plans zu welcher die Suche gehört oder null, falls die Suche
     * Plan-Unabhängig ist
     */
    private int planId;

    /**
     * Methode zum erhalten aller geladenen Module in einer
     * SimpleModuleCollection
     * 
     * @return Eine SimpleModuleCollection mit allen Modulen aus searchModules
     */
    public SimpleModuleCollection getModules() {
        return null;
    }

    /**
     * Methode welche weitere Module aus der Server-Resource l�dt.
     */
    public void loadMoreModules() {
    }

    /**
     * Methode, welche die Filter neu setzt und im Zuge desse, die alten
     * SearchModuleCollections l�scht und highestLoaded zurücksetzt.
     * Anschließend werden erneut Module geladen.
     * 
     * @param filters
     *            Die Filter, welche bei der Suche berücksichtigt werden sollen.
     */
    public void setFilters(final FilterCollection filters) {
    }
};
