// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package edu.kit.informatik.studyplan.server.filter;

import javax.ws.rs.BadRequestException;
import javax.ws.rs.core.MultivaluedMap;
import java.util.HashMap;
import java.util.Map;

/**
 * Descriptions of the published filter classes for the client. Offers facility to construct filters from GET request
 * parameters.
 */
public abstract class FilterDescriptor {
	/**
	 * Creates a new instance of the given filter with the given parameters
	 * @param id the filter id
	 * @param filterUriIdentifier the filter identifier used by the client
	 * @param filterName the displayable filter name
	 * @param tooltip the filter tooltip
	 */
	FilterDescriptor(int id, String filterUriIdentifier, String filterName, String tooltip) {
		this.id = id;
		this.filterUriIdentifier = filterUriIdentifier;
		this.filterName = filterName;
		this.tooltip = tooltip;
	}

	private int id;

	private String filterUriIdentifier;

	private String filterName;

	private String tooltip;

	/**
	 * 
	 * @return a JSON representation of the described filter for the client.
	 */
	public Map<String, Object> toJson() {
		Map<String, Object> result = new HashMap<>(5);
		result.put("id", getId());
		result.put("name", getFilterName());
		result.put("uri-name", getFilterUriIdentifier());
		result.put("default-value", getDefaultJsonValue());
		result.put("tooltip", getTooltip());
		result.put("specification", getJsonSpecification());
		return result;
	};

	/**
	 * 
	 * @return the filter id
	 */
	public int getId() {
		return id;
	}

	/**
	 * @return a JSON representation of the default values of the described filter
	 */
	public abstract Object getDefaultJsonValue();

	/**
	 *
	 * @return the `specification` attribute for the JSON representation of the described filter
     */
	public abstract Map<String, Object> getJsonSpecification();

	/**
	 * Constructs a filter from a GET request parameter table.
	 * @param parameters the GET parameters
	 * @return the constructed filter
	 * @throws BadRequestException if the needed GET parameters are invalid
     */

	public abstract AttributeFilter getFilterFromRequest(MultivaluedMap<String, String> parameters)
			throws BadRequestException;

	/**
	 * 
	 * @return the filter name (used for GUI purposes)
	 */
	private String getFilterName() {
		return filterName;
	}

	/**
	 * 
	 * @return a tooltip for the filter (for GUI purposes).
	 */
	private String getTooltip() {
		return tooltip;
	}

	/**
	 *
	 * @return the filter identifier used in GET requests.
     */
	String getFilterUriIdentifier() {
		return filterUriIdentifier;
	}
};
