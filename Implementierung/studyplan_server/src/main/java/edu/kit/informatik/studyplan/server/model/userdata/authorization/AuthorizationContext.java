// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package edu.kit.informatik.studyplan.server.model.userdata.authorization;

import java.security.Principal;
import java.util.Date;

import javax.ws.rs.core.SecurityContext;

import edu.kit.informatik.studyplan.server.model.userdata.User;
import edu.kit.informatik.studyplan.server.model.userdata.authorization.AuthorizationScope;
import edu.kit.informatik.studyplan.server.model.userdata.authorization.RESTClient;

/************************************************************/
/**
 * Modelliert einen Authorisierungskontext.<br>
 * Er enthält die benötigten Informationen für einen authorisierten Benutzer
 * siehe Kapitel ???
 */
public class AuthorizationContext implements SecurityContext {
	/**
	 * 
	 */
	private String accessToken;
	/**
	 * 
	 */
	private Date expiryDate;
	/**
	 * 
	 */
	private AuthorizationScope scope;
	/**
	 * 
	 */
	private String refreshToken;
	/**
	 * 
	 */
	private RESTClient restClient;
	/**
	 * 
	 */
	private User user;

	/**
	 * 
	 * @return gibt den Nutzer zurück
	 */
	public User getUser() {
		return user;
	}

	/**
	 * 
	 * @param user
	 *            der Nutzer
	 */
	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * 
	 * @return gibt den Access-Token zurück
	 */
	public String getAccessToken() {
		return accessToken;
	}

	/**
	 * 
	 * @param accessToken
	 *            der Access-Token
	 */
	public void setAccessToken(String accessToken) {
	}

	/**
	 * 
	 * @return gibt das Verfallsdatum des Access-Tokens zurück
	 */
	public Date getExpiryDate() {
		return expiryDate;
	}

	/**
	 * 
	 * @param date
	 *            das Verfallsdatum
	 */
	public void setExpiryDate(Date date) {
	}

	/**
	 * 
	 * @return gibt die Berechtigung des Nutzers zurück
	 */
	public AuthorizationScope getScope() {
		return scope;
	}

	/**
	 * 
	 * @param scope
	 *            die Berechtigung
	 */
	public void setScope(AuthorizationScope scope) {
	}

	/**
	 * 
	 * @return gibt den Refresh-Token zurück
	 */
	public String getRefreshToken() {
		return refreshToken;
	}

	/**
	 * 
	 * @param refreshToken
	 *            der Refresh-Token
	 */
	public void setRefreshToken(String refreshToken) {
	}

	/**
	 * 
	 * @return gibt den zugehörigen REST-Client zurück
	 */
	public RESTClient getRestClient() {
		return restClient;
	}

	/**
	 * 
	 * @param client
	 *            der REST-Client
	 */
	public void setRestClient(RESTClient client) {
	}

	@Override
	public Principal getUserPrincipal() {
		return user;
	}

	@Override
	public boolean isUserInRole(String role) {
		return role.equals(scope.toString());
	}

	@Override
	public boolean isSecure() {
		return false;
	}

	@Override
	public String getAuthenticationScheme() {
		return BASIC_AUTH;
	}
};
