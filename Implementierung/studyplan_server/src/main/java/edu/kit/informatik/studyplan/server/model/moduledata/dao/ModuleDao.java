// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package edu.kit.informatik.studyplan.server.model.moduledata.dao;

import java.util.List;

import edu.kit.informatik.studyplan.server.filter.Filter;
import edu.kit.informatik.studyplan.server.model.moduledata.Category;
import edu.kit.informatik.studyplan.server.model.moduledata.Discipline;
import edu.kit.informatik.studyplan.server.model.moduledata.Field;
import edu.kit.informatik.studyplan.server.model.moduledata.Module;
import edu.kit.informatik.studyplan.server.model.moduledata.ModuleType;

/************************************************************/
/**
 * DataAccessObject zum Zugriff auf die Modul-Datenbank
 */
public interface ModuleDao {

	/**
	 * 
	 * @param id
	 *            der String-Identifier des zu suchenden Moduls
	 * @return das Modul mit dem entsprechenden Identifier, <code>null</code>
	 *         wenn kein Modul gefunden
	 */
	Module getModuleById(String id);

	/**
	 * Sucht alle Module die den angegebenen Filterkritierien entsprechen und
	 * gibt diese zurück
	 * 
	 * @return die Modulliste
	 * @param filter
	 *            der Modulfilter
	 * @param discipline
	 *            der Studiengang, in welchem gefiltert werden soll
	 */

	List<Module> getModulesByFilter(Filter filter, Discipline discipline);

	/**
	 * Gibt ein zufälliges Modul, welches den angebenen Filterkriterien
	 * entspricht, zurück
	 * 
	 * @param filter
	 *            der Modulfilter
	 * @param discipline
	 *            der Studiengang, aus welchem das Modul gefischt werden soll
	 * @return das Modul
	 */
	Module getRandomModuleByFilter(Filter filter, Discipline discipline);

	/**
	 *
	 * @return gibt eine Liste der verfügbaren Studiengänge zurück
	 */
	List<Discipline> getDisciplines();

    /**
     *
     * @param disciplineId
     *            the unique ID of a discipline
     * @return returns the discipline with the specific ID, if not found
     *         <code>null</code>
     */
    Discipline getDisciplineById(int disciplineId);


    /**
	 * @param discipline
	 *            der die Kategorien enthaltende Studiengang
	 * @return gibt eine Liste der zum Studiengang gehörenden verfügbaren
	 *         Kategorien zurück
	 */

	List<Category> getCategories(Discipline discipline);

	/**
	 * TODO maybe rewrite/override using SQL & DB if necessary
	 *  @return the discipline's category with given ID or null if not found
	 *
	 */
	Category getCategoryById(int id);

    /**
	 * @param discipline
	 *            der die Bereiche enthaltende Studiengang
	 * @return gibt eine Liste der zum Studiengang gehörenden verfügbaren
	 *         Bereiche zurück
	 */
	List<Field> getFields(Discipline discipline);

    /**
     * TODO maybe rewrite/override using SQL & DB if necessary
     *  @return the discipline's field with given ID or null if not found
     *
     */
    Field getFieldById(int id);
    
    /**
     * 
     * @return
     */
    List<ModuleType> getModuleTypes();

    
    /**
     * 
     * @param field
     * @return
     */
    List<Category> getSubjects(Field field);
};
