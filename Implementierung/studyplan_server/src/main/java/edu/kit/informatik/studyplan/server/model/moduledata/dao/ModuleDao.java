// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package edu.kit.informatik.studyplan.server.model.moduledata.dao;

import java.util.List;

import edu.kit.informatik.studyplan.server.filter.Filter;
import edu.kit.informatik.studyplan.server.model.moduledata.Category;
import edu.kit.informatik.studyplan.server.model.moduledata.Discipline;
import edu.kit.informatik.studyplan.server.model.moduledata.Field;
import edu.kit.informatik.studyplan.server.model.moduledata.Module;
import edu.kit.informatik.studyplan.server.model.moduledata.ModuleType;

/************************************************************/
/**
 * DataAccessObject for accessing modules
 */
public interface ModuleDao {

	/**
	 * 
	 * @param id
	 *            the identifier of the module
	 * @return the module or <code>null</code> if not found
	 */
	Module getModuleById(String id);

	/**
	 * Searches for all modules matching the given filter criteria.
	 * 
	 * @return the module list
	 * 
	 * @param filter
	 *            the module filter
	 * @param discipline
	 *            the discipline for filtering
	 */

	List<Module> getModulesByFilter(Filter filter, Discipline discipline);

	/**
	 * Searches a random module matching the given filter criteria.
	 * 
	 * @param filter
	 *            the module filter
	 * @param discipline
	 *            the discipline for filtering
	 * @return returns a random module or <code>null</code> if no matching
	 *         module is found
	 */
	Module getRandomModuleByFilter(Filter filter, Discipline discipline);

	/**
	 *
	 * @return returns a list of all available disciplines
	 */
	List<Discipline> getDisciplines();

	/**
	 *
	 * @param disciplineId
	 *            the unique ID of a discipline
	 * @return returns the discipline with the specific ID, if not found
	 *         <code>null</code>
	 */
	Discipline getDisciplineById(int disciplineId);

	/**
	 * @param discipline
	 *            a discipline
	 *
	 * @return a list of all categories belonging to that discipline
	 */

	List<Category> getCategories(Discipline discipline);

	/**
	 * 
	 * @param id
	 *            a unique category identifier
	 *
	 * @return the discipline's category with given ID or <code>null</code> if
	 *         not found
	 *
	 */
	Category getCategoryById(int id);

	/**
	 * 
	 * @param discipline
	 *            a discipline
	 * @return a list of all field for that discipline
	 */
	List<Field> getFields(Discipline discipline);

	/**
	 *
	 * @param id
	 *            the field id
	 * @return field with given ID or <code>null</code> if not found
	 *
	 */
	Field getFieldById(int id);

	/**
	 * 
	 * @return returns a list of all module types
	 */
	List<ModuleType> getModuleTypes();

	/**
	 * 
	 * @param field
	 *            the field
	 * @return returns a list of all subjects for a given field
	 */
	List<Category> getSubjects(Field field);
};
