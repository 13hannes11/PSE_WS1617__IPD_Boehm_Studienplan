// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package edu.kit.informatik.studyplan.server.filter;

import edu.kit.informatik.studyplan.server.rest.resources.json.SimpleJsonResponse;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * Enumeration of attribute filter types.
 */
public enum FilterType {
	/**
	 * Represents the filter type {@link RangeFilter}.
	 */
	RANGE {
		@Override
		public Map<String, Object> toJsonSpecification(AttributeFilter defaultFilter) {
			Map<String, Object> result = new HashMap<>(3);
			result.put("type", "range");
			result.put("min", ((RangeFilter) defaultFilter).getMin());
			result.put("max", ((RangeFilter) defaultFilter).getMax());
			return result;
		}

		@Override
		public Object defaultJsonValue(AttributeFilter defaultFilter) {
			Map<String, Object> result = new HashMap<>(2);
			result.put("min", ((RangeFilter) defaultFilter).getMin());
			result.put("max", ((RangeFilter) defaultFilter).getMax());
			return result;
		}
	},
	/**
	 * Represents the filter type {@link ListFilter}.
	 */
	LIST {
		@Override
		public Map<String, Object> toJsonSpecification(AttributeFilter defaultFilter) {
			Map<String, Object> result = new HashMap<>(2);
			result.put("type", "list");
			List<String> itemStrings = ((ListFilter<?>) defaultFilter).getItemStrings();
			List<ListItem> items = IntStream.range(0, itemStrings.size())
					.mapToObj(i -> new ListItem(0, itemStrings.get(i)))
					.collect(Collectors.toList());
			result.put("items", items);
			return result;
		}

		@Override
		public Object defaultJsonValue(AttributeFilter defaultFilter) {
			return 0;
		}
	},
	/**
	 * Represents the filter type {@link ContainsFilter}.
	 */
	CONTAINS {
		@Override
		public Map<String, Object> toJsonSpecification(AttributeFilter defaultFilter) {
			return SimpleJsonResponse.build("type", "contains");
		}

		@Override
		public Object defaultJsonValue(AttributeFilter defaultFilter) {
			return "";
		}
	};

	/**
	 * 
	 * @param defaultFilter
	 *            the default filter object
	 * @return the `specification` attribute for the JSON representation of the given default filter
	 */
	public abstract Map<String, Object> toJsonSpecification(AttributeFilter defaultFilter);

	/**
	 * 
	 * @param defaultFilter
	 *            the filter object containing the default values
	 * @return a JSON representation of the values of the default filter object
	 */
	public abstract Object defaultJsonValue(AttributeFilter defaultFilter);

	/**
	 * Represents a JSON list item by id and name.
     */
	private static class ListItem {
		private int id;
		private String name;

		ListItem(int id, String name) {
			this.id = id;
			this.name = name;
		}

		int getId() {
			return id;
		}

		void setId(int id) {
			this.id = id;
		}

		String getName() {
			return name;
		}

		void setName(String name) {
			this.name = name;
		}
	}
};
